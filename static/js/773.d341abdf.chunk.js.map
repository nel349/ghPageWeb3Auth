{"version":3,"file":"static/js/773.d341abdf.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/openlogin-adapter/src/config.ts","../node_modules/@web3auth/openlogin-adapter/src/openloginAdapter.ts"],"sourcesContent":["import { OPENLOGIN_NETWORK, UX_MODE } from \"@toruslabs/openlogin\";\nimport { ChainNamespaceType, getChainConfig } from \"@web3auth/base\";\n\nimport { OpenloginAdapterOptions } from \"./interface\";\n\nexport const getOpenloginDefaultOptions = (chainNamespace?: ChainNamespaceType, chainId?: number | string): OpenloginAdapterOptions => {\n  return {\n    adapterSettings: {\n      network: OPENLOGIN_NETWORK.MAINNET,\n      clientId: \"\",\n      uxMode: UX_MODE.POPUP,\n    },\n    chainConfig: chainNamespace ? getChainConfig(chainNamespace, chainId) : null,\n    loginSettings: {},\n  };\n};\n","import OpenLogin, { getHashQueryParams, LoginParams, OPENLOGIN_NETWORK, OpenLoginOptions, SUPPORTED_KEY_CURVES, UX_MODE } from \"@toruslabs/openlogin\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport { CommonPrivateKeyProvider, IBaseProvider } from \"@web3auth/base-provider\";\nimport merge from \"lodash.merge\";\n\nimport { getOpenloginDefaultOptions } from \"./config\";\nimport type { LoginSettings, OpenloginAdapterOptions } from \"./interface\";\n\nexport type OpenloginLoginParams = LoginParams & {\n  // to maintain backward compatibility\n  login_hint?: string;\n};\n\ntype PrivateKeyProvider = IBaseProvider<string>;\n\nexport class OpenloginAdapter extends BaseAdapter<OpenloginLoginParams> {\n  readonly name: string = WALLET_ADAPTERS.OPENLOGIN;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.MULTICHAIN;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.IN_APP;\n\n  public openloginInstance: OpenLogin | null = null;\n\n  public clientId: string;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  private openloginOptions: OpenLoginOptions;\n\n  private loginSettings: LoginSettings = {};\n\n  private privKeyProvider: PrivateKeyProvider | null = null;\n\n  constructor(params: OpenloginAdapterOptions) {\n    super();\n    log.debug(\"const openlogin adapter\", params);\n    const defaultOptions = getOpenloginDefaultOptions(params.chainConfig?.chainNamespace, params.chainConfig?.chainId);\n    this.openloginOptions = {\n      clientId: \"\",\n      network: OPENLOGIN_NETWORK.MAINNET,\n      ...defaultOptions.adapterSettings,\n      ...(params.adapterSettings || {}),\n    };\n    this.clientId = params.adapterSettings?.clientId as string;\n    this.loginSettings = { ...defaultOptions.loginSettings, ...params.loginSettings };\n    this.sessionTime = this.loginSettings.sessionTime || 86400;\n    // if no chainNamespace is passed then chain config should be set before calling init\n    if (params.chainConfig?.chainNamespace) {\n      this.currentChainNamespace = params.chainConfig?.chainNamespace;\n      const defaultChainIdConfig = defaultOptions.chainConfig ? defaultOptions.chainConfig : {};\n      this.chainConfig = { ...defaultChainIdConfig, ...params?.chainConfig };\n      log.debug(\"const openlogin chainConfig\", this.chainConfig);\n      if (!this.chainConfig.rpcTarget && params.chainConfig.chainNamespace !== CHAIN_NAMESPACES.OTHER) {\n        throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n      }\n    }\n  }\n\n  get chainConfigProxy(): CustomChainConfig | null {\n    return this.chainConfig ? { ...this.chainConfig } : null;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.privKeyProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    if (!this.openloginOptions?.clientId) throw WalletInitializationError.invalidParams(\"clientId is required before openlogin's initialization\");\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    let isRedirectResult = false;\n\n    if (this.openloginOptions.uxMode === UX_MODE.REDIRECT) {\n      const redirectResult = getHashQueryParams();\n      if (Object.keys(redirectResult).length > 0 && redirectResult._pid) {\n        isRedirectResult = true;\n      }\n    }\n    this.openloginOptions = {\n      ...this.openloginOptions,\n      replaceUrlOnRedirect: isRedirectResult,\n    };\n    this.openloginInstance = new OpenLogin(this.openloginOptions);\n    log.debug(\"initializing openlogin adapter init\");\n\n    await this.openloginInstance.init();\n\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.OPENLOGIN);\n\n    try {\n      log.debug(\"initializing openlogin adapter\");\n      // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true\n      if (this.openloginInstance.privKey && (options.autoConnect || isRedirectResult)) {\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached openlogin provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(params?: OpenloginLoginParams): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { ...params, adapter: WALLET_ADAPTERS.OPENLOGIN });\n    try {\n      await this.connectWithProvider(params);\n      return this.provider;\n    } catch (error: unknown) {\n      log.error(\"Failed to connect with openlogin provider\", error);\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if ((error as Error)?.message.includes(\"user closed popup\")) {\n        throw WalletLoginError.popupClosed();\n      }\n      throw WalletLoginError.connectionError(\"Failed to login with openlogin\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    await this.openloginInstance.logout();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.openloginInstance = null;\n      this.privKeyProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async authenticateUser(): Promise<{ idToken: string }> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const userInfo = await this.getUserInfo();\n    return {\n      idToken: userInfo.idToken as string,\n    };\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    const userInfo = await this.openloginInstance.getUserInfo();\n    return userInfo;\n  }\n\n  // should be called only before initialization.\n  setAdapterSettings(adapterSettings: OpenLoginOptions & { sessionTime: number }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    const defaultOptions = getOpenloginDefaultOptions();\n    this.openloginOptions = { ...defaultOptions.adapterSettings, ...(this.openloginOptions || {}), ...adapterSettings };\n    if (adapterSettings.sessionTime) {\n      this.loginSettings = { ...this.loginSettings, sessionTime: adapterSettings.sessionTime };\n    }\n    if (adapterSettings.clientId) {\n      this.clientId = adapterSettings.clientId;\n    }\n  }\n\n  // should be called only before initialization.\n  setChainConfig(customChainConfig: CustomChainConfig): void {\n    super.setChainConfig(customChainConfig);\n    this.currentChainNamespace = customChainConfig.chainNamespace;\n  }\n\n  private async connectWithProvider(params?: OpenloginLoginParams): Promise<void> {\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n    if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n      const { SolanaPrivateKeyProvider } = await import(\"@web3auth/solana-provider\");\n      this.privKeyProvider = new SolanaPrivateKeyProvider({ config: { chainConfig: this.chainConfig } });\n    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.EIP155) {\n      const { EthereumPrivateKeyProvider } = await import(\"@web3auth/ethereum-provider\");\n      this.privKeyProvider = new EthereumPrivateKeyProvider({ config: { chainConfig: this.chainConfig } });\n    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.OTHER) {\n      this.privKeyProvider = new CommonPrivateKeyProvider();\n    } else {\n      throw new Error(`Invalid chainNamespace: ${this.currentChainNamespace} found while connecting to wallet`);\n    }\n    // if not logged in then login\n    if (!this.openloginInstance.privKey && params) {\n      if (!this.loginSettings.curve) {\n        this.loginSettings.curve =\n          this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA ? SUPPORTED_KEY_CURVES.ED25519 : SUPPORTED_KEY_CURVES.SECP256K1;\n      }\n      await this.openloginInstance.login(\n        merge(\n          this.loginSettings,\n          { loginProvider: params.loginProvider },\n          { extraLoginOptions: { ...(params.extraLoginOptions || {}), login_hint: params.login_hint || params.extraLoginOptions?.login_hint } }\n        )\n      );\n    }\n    let finalPrivKey = this.openloginInstance.privKey;\n    if (finalPrivKey) {\n      if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n        const { getED25519Key } = await import(\"@toruslabs/openlogin-ed25519\");\n        finalPrivKey = getED25519Key(finalPrivKey).sk.toString(\"hex\");\n      }\n      await this.privKeyProvider.setupProvider(finalPrivKey);\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.OPENLOGIN, reconnected: !params } as CONNECTED_EVENT_DATA);\n    }\n  }\n}\n"],"names":["getOpenloginDefaultOptions","chainNamespace","chainId","adapterSettings","network","OPENLOGIN_NETWORK","clientId","uxMode","UX_MODE","chainConfig","getChainConfig","loginSettings","OpenloginAdapter","constructor","params","_defineProperty","WALLET_ADAPTERS","ADAPTER_NAMESPACES","ADAPTER_CATEGORY","ADAPTER_STATUS","CHAIN_NAMESPACES","log","defaultOptions","_params$chainConfig","_params$chainConfig2","openloginOptions","_params$adapterSettin","sessionTime","_params$chainConfig3","currentChainNamespace","_params$chainConfig4","defaultChainIdConfig","rpcTarget","WalletInitializationError","this","provider","privKeyProvider","_","Error","options","_this$openloginOption","isRedirectResult","redirectResult","getHashQueryParams","Object","keys","length","_pid","_objectSpread","replaceUrlOnRedirect","openloginInstance","OpenLogin","init","status","emit","ADAPTER_EVENTS","privKey","autoConnect","connect","adapter","connectWithProvider","error","message","includes","WalletLoginError","cleanup","logout","getUserInfo","userInfo","idToken","setAdapterSettings","setChainConfig","customChainConfig","SolanaPrivateKeyProvider","config","EthereumPrivateKeyProvider","CommonPrivateKeyProvider","curve","SUPPORTED_KEY_CURVES","login","merge","loginProvider","extraLoginOptions","login_hint","_params$extraLoginOpt","finalPrivKey","getED25519Key","sk","toString","setupProvider","reconnected","BaseAdapter"],"sourceRoot":""}